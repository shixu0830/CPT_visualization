259/300
259/300*4
All_tests = function(lambda,RR,dist,n1,n2,size_null,size_alte,
est_dispersion){
## generate data
if(dist=="NB"){
y1 = sapply(lambda,FUN=function(x){rnbinom(n=n1,mu=x,size=size_null)} )
y2 = sapply(RR*lambda,FUN=function(x){rnbinom(n=n2,mu=x,size=size_null)} )
}else if(dist=="pois"){
y1 = sapply(lambda,FUN=function(x){rpois(n=n1, lambda = x)} )
y2 = sapply(RR*lambda,FUN=function(x){rpois(n=n2, lambda = x)} )
}else if(dist=="bin"){
y1 = sapply(lambda,FUN=function(x){rbinom(n = n1, size = n1, prob = x/n1)} )
y2 = sapply(RR*lambda,FUN=function(x){rbinom(n = n2, size = n2, prob = x/n2)} )
}else if(dist=="zinflP"){
sig = size_null/(1+size_null)
y1 = sapply(lambda,FUN=function(x){rZIP(n=n1, mu=x/sig, sigma=sig)} )
y2 = sapply(RR*lambda,FUN=function(x){rZIP(n=n2, mu=x/sig, sigma=sig)} )
}
y = rbind(y1,y2)
s.y1 = apply(y1,2,sum);s.y2 = apply(y2,2,sum) # collapsed data
bin.y = apply( y,2,FUN=function(x){ as.numeric(x>0) } ) # binary data, dim = (n1+n2)*length(lambda)
bin.y1 = apply( y1,2,FUN=function(x){ as.numeric(x>0) } ) # binary data, dim = (n1)*length(lambda)
bin.y2 = apply( y2,2,FUN=function(x){ as.numeric(x>0) } ) # binary data, dim = (n2)*length(lambda)
s.bin.y1=apply(bin.y1,2,sum);s.bin.y2=apply(bin.y2,2,sum)
site = c(rep(1,n1),rep(0,n2))
n.lambda = length(lambda)
## byhand NegBin LRT
NB_byhand = apply(y, 2, FUN=function(x){
m <- try(glm.nb(x~factor(site),data=data.frame(x,site),
control=list(maxit = 100,epsilon = 1e-8,trace=F)), silent=TRUE)
if(inherits(m, "try-error")){
Negloglik_alte = try(optim(par=c(0.5,0.5,0.5),fn=Neg.log.like_alte,
method="L-BFGS-B",x=x,site=site,
lower=c(-Inf,-Inf,0),
control=list(maxit=1000)), silent=TRUE)
Negloglik_null = try(optim(par=c(0.5,0.5),fn=Neg.log.like_null,
method="L-BFGS-B",x=x,
lower=c(-Inf,0),
control=list(maxit=1000)), silent=TRUE)
if(inherits(Negloglik_alte, "try-error") | inherits(Negloglik_null, "try-error")){
#moment est of theta under the null..
#have to assume heterogeneity bc under alternative cant converge
size.m = try(theta.mm(x, mu=mean(x),dfr=length(site)-1), silent=T)
if(inherits(size.m, "try-error")){return(list(dev=0,error=T,size=1e200))}else{
return(list(dev=0,error=T,size=size.m))}
}else{
list(dev=2*(Negloglik_null$value-Negloglik_alte$value),error=T,
size=Negloglik_alte$par[3])}
}else{
list(dev=m$null.deviance-m$deviance,error=F,size=m$theta)
}
})
T_NB_byhand = as.data.frame(NB_byhand[1:length(NB_byhand)])[,seq(1,3*n.lambda,by=3)]
error = as.numeric(as.data.frame(NB_byhand[1:length(NB_byhand)])[,seq(2,3*n.lambda,by=3)])
size_alte = as.numeric(as.data.frame(NB_byhand[1:length(NB_byhand)])[,seq(3,3*n.lambda,by=3)])
p_NB_LRT = pchisq(unlist(T_NB_byhand),df=1,lower.tail = F)
## (2) NegBin exact test
p_NB_exact = myexactTestDoubleTail_New(s.y1,s.y2, dispersion=1/(size_alte),n1,n2)
#note: size_alte instead of size_null*norm cuz this time I used pt-level data to est
#code-wise dispersion parameter (captures variability within elements of sumation for s.y1)
## (3) Poisson LRT
model_alte_pois = apply(y, 2, FUN=function(x){
glm(x~factor(site),data=data.frame(x,site),family="poisson",
maxit = 50,epsilon = 1e-8,trace=F)
})
deviance_alte_pois = unlist(lapply(model_alte_pois,FUN=function(x){x$deviance}))
deviance_alte.null_pois = unlist(lapply(model_alte_pois,FUN=function(x){x$null.deviance}))
T_NB_byhand2_pois = deviance_alte.null_pois-deviance_alte_pois # same as LRbinom below
p_pois_LRT = pchisq(T_NB_byhand2_pois,df=1,lower.tail = F)
## (4) Pois exact test
p_pois_exact=apply(cbind(s.y2,s.y1),1,FUN=function(x){
poisson.test(x,T=c(n2,n1),r=1,alternative="two.sided")$p.value #T:person-time
})
## (5) Binomial LRT
model_alte_bin = apply(bin.y, 2, FUN=function(x){
glm(x~factor(site),data=data.frame(x,site),family="binomial",
maxit = 50,epsilon = 1e-8,trace=F)
})
deviance_alte_bin = unlist(lapply(model_alte_bin,FUN=function(x){x$deviance}))
deviance_alte.null_bin = unlist(lapply(model_alte_bin,FUN=function(x){x$null.deviance}))
T_NB_byhand2_bin = deviance_alte.null_bin-deviance_alte_bin # same as LRbinom below
p_bin_LRT = pchisq(T_NB_byhand2_bin,df=1,lower.tail = F)
## (6) Fisher's exact
table = data.frame(s.bin.y1,m1=n1-s.bin.y1,s.bin.y2,m2=n2-s.bin.y2)
p_Fisher = apply(table,1,FUN=function(x){
fisher.test(matrix(x,nrow=2,ncol=2),or=1,alternative = "two.sided")$p.value
})
## (7) predict site LRT
Pred_site = apply(y, 2, FUN=function(x){
m <- try(glm(site~x,data=data.frame(x,site),
control=list(maxit = 50,epsilon = 1e-8,trace=F),family="binomial"), silent=TRUE)
list(dev=m$null.deviance-m$deviance,error=F)
})
T_Pred_site = as.data.frame(Pred_site[1:length(Pred_site)])[,seq(1,2*n.lambda,by=2)]
# error2 = as.numeric(as.data.frame(Pred_site[1:length(Pred_site)])[,seq(2,2*n.lambda,by=2)])
p_Pred_site = pchisq(unlist(T_Pred_site),df=1,lower.tail = F)
## (8) T test
p_ttest_hetero = apply(y, 2, FUN=function(x){
myttest = t.test(x~site, var.equal=F)
if(is.nan(myttest$p.value)){
1
}else{
myttest$p.value
}
})
## (9) T test
p_ttest_homo = apply(y, 2, FUN=function(x){
myttest = t.test(x~site, var.equal=T)
if(is.nan(myttest$p.value)){
1
}else{
myttest$p.value
}
})
## (10) Optimal test
s.y = apply(y,2,sum)
p_optimal = rep(10,n.lambda)
p_optimal[which(s.y>40)] = p_ttest_hetero[which(s.y>40)]
p_optimal[which(s.y<=40)] = p_NB_exact[which(s.y<=40)]
return(data.frame(p_NB_LRT, p_pois_LRT, p_bin_LRT, p_NB_exact,
p_pois_exact, p_Fisher, p_Pred_site, p_ttest_hetero,
p_ttest_homo, p_optimal, error))
}
# ################################ functions ################################
# ## log likelihood for byhand NegBin LRT
Neg.log.like_alte = function (x,param,site){
intercept = param[1]
slope = param[2]
size = param[3]
mu = exp(intercept + slope*site)
out = -sum(log(dnbinom(x = x, size = size, mu = mu)))
if(!is.finite(out)) {out = 1e+200}
return(out)
}
Neg.log.like_null = function (x,param){
intercept = param[1]
size = param[2]
mu = exp(intercept)
out = -sum(log(dnbinom(x = x, size = size, mu = mu)))
if(!is.finite(out)) {out = 1e+200}
return(out)
}
# ## NB exact test
myexactTestDoubleTail_New = function(s.y1,s.y2,dispersion=0,n1,n2)
{
s.y1 = round(s.y1)
s.y2 = round(s.y2)
ncodes = length(s.y1)
if(length(dispersion)==1) dispersion = rep(dispersion,ncodes)
#  Null fitted values
s = s.y1+s.y2
r = size = 1/dispersion # same dispersion param for two sites
mu = (s.y1+s.y2)/(n1+n2)
# "mu" is lambda under the null; dont use (s.y1/n1+s.y2/n2)/2
size1 = n1/dispersion; size2=n2/dispersion; sizes = (n1+n2)/dispersion
mu1 = n1*mu; mu2=n2*mu; mus = (n1+n2)*mu
p.bot = p.top = pvals = rep(10,ncodes)
left = s.y1<=mu1
if(any(left)) {
p.bot[left] <- dnbinom(s[left],size=sizes[left],mu=mus[left])
for (g in which(left)) {
x = 0:s.y1[g]
tmp.p.top = dnbinom(x,size=size1[g],mu=mu1[g]) *
dnbinom(s[g]-x,size=size2[g],mu=mu2[g])
p.top[g] = 2*sum(tmp.p.top)
}
pvals[left] = p.top[left]/p.bot[left]
}
right = s.y1>=mu1
if(any(right)) {
p.bot[right] = dnbinom(s[right],size=sizes[right],mu=mus[right])
for (g in which(right)) {
x = s.y1[g]:s[g]
tmp.p.top = dnbinom(x,size=size1[g],mu=mu1[g]) *
dnbinom(s[g]-x,size=size2[g],mu=mu2[g])
p.top[g] = 2*sum(tmp.p.top)
}
pvals[right] = p.top[right]/p.bot[right]
}
pmin(pvals,1)
}
library(MASS)
library(edgeR)
library(gamlss.dist) # zeroinflated data generator
alpha = 0.05
lambda = 10^(seq(from=-6,to=2,by=0.25));lambda = lambda[order(lambda)]
RR = 1
lambda.power = 1
n.simulations = 5
if(length(RR)>1){
lambda = rep(lambda.power,length(RR))
}
true.size_null = size_null = 2
true.size_alte = size_alte  = 2
#   true.size_null = size_null = 1/2
#   true.size_alte = size_alte  = 1/2
n1 = 1000; n2 = 3000
typeIerror = list()
datadist = "NB"
for(i in 1:n.simulations){
tmp=All_tests(
lambda,RR,
dist=datadist,
n1, n2,
size_null=true.size_null,
size_alte=true.size_alte,
est_dispersion=T)
typeIerror = append(typeIerror,tmp)
}
#   proc.time()-t
if(length(RR)==1){
add=paste("Size",sep="")
}else{
add=paste("Pw",-log10(lambda.power),sep="")
}
getwd()
warnings()
getwd()
save(typeIerror,file=paste( myfilepath,add,"T", time,
"_",datadist,"_n",n.simulations,"_",
Sys.Date(),".RData",sep=""))
myfilepath = "/home/students/xushi/NewNew_Simulation_CPT/"
save(typeIerror,file=paste( myfilepath,add,"T", time,
"_",datadist,"_n",n.simulations,"_",
Sys.Date(),".RData",sep=""))
add
paste( myfilepath,add,"T", time,
"_",datadist,"_n",n.simulations,"_",
Sys.Date(),".RData",sep="")
n.simulations
myfilepath
Sys.Date()
paste( myfilepath, add,"T", time,
"_",datadist,"_n","_",
Sys.Date(),".RData",sep="")
paste( myfilepath, add,"T", time,
"_n",n.simulations,"_",
Sys.Date(),".RData",sep="")
paste( myfilepath, "T", time,
"_",datadist,"_n",n.simulations,"_",
Sys.Date(),".RData",sep="")
time=1
paste( myfilepath, add,"T", time,
"_",datadist,"_n",n.simulations,"_",
Sys.Date(),".RData",sep="")
save(typeIerror,file=paste( myfilepath, add,"T", time,
"_",datadist,"_n",n.simulations,"_",
Sys.Date(),".RData",sep=""))
getwd()
myfilepath="/Users/xushi/Dropbox/"
save(typeIerror,file=paste( myfilepath, add,"T", time,
"_",datadist,"_n",n.simulations,"_",
Sys.Date(),".RData",sep=""))
setwd("~/Dropbox/CPT PaperDraft/Rpackage")
library(shiny)
runApp("CPT_visualization")
